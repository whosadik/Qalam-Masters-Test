// src/pages/proofreader/ProofreaderDashboard.jsx
"use client";
import { useEffect, useMemo, useState } from "react";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Loader2, Trash2, Upload as UploadIcon, CheckCircle2, Plus } from "lucide-react";
import {
  Select, SelectContent, SelectItem, SelectTrigger, SelectValue,
} from "@/components/ui/select";
import { http, withParams } from "@/lib/apiClient";
import { API } from "@/constants/api";
import {
  listArticles, listArticleFiles, updateArticleStatus,
  uploadProductionPdf, deleteArticleFile,
} from "@/services/articlesService";

import {
  listIssues, createIssueArticle, getIssuePdfUrl, uploadIssuePdf,
  advanceIssueTo, forceIssueToProduction, getIssue, prettyIssueTitle,
} from "@/services/issuesService";

const STATUS_LABEL = {
  draft: "–ß–µ—Ä–Ω–æ–≤–∏–∫",
  submitted: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
  screening: "–°–∫—Ä–∏–Ω–∏–Ω–≥",
  under_review: "–ù–∞ —Ä–µ—Ü–µ–Ω–∑–∏–∏",
  revision_minor: "Minor revision",
  revision_major: "Major revision",
  accepted: "–ü—Ä–∏–Ω—è—Ç–∞",
  rejected: "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
  in_production: "–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ",
  published: "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞",
};

const fmt = (iso) => (iso ? new Date(iso).toLocaleString("ru-RU") : "‚Äî");

/* ---------- –ë–ª–æ–∫ —Ä–∞–±–æ—Ç—ã —Å production_pdf –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏ (–∫–∞–∫ –±—ã–ª–æ) ---------- */
function ProductionPdfBlock({ article, onChanged }) {
  const [files, setFiles] = useState([]);
  const [busy, setBusy] = useState(false);
  const [publishing, setPublishing] = useState(false);
  const [loadingFiles, setLoadingFiles] = useState(true);

  const isAccepted = article.status === "accepted";
  const isInProd = article.status === "in_production";
  const isPublished = article.status === "published";

  const prodPdfs = files.filter((f) => f.type === "production_pdf");
  const hasPdf = prodPdfs.length > 0;

  async function refreshFiles() {
    setLoadingFiles(true);
    try {
      const list = await listArticleFiles(article.id, { page_size: 100 });
      setFiles(list);
    } finally {
      setLoadingFiles(false);
    }
  }

  useEffect(() => { refreshFiles(); /* eslint-disable-next-line */ }, [article.id]);

  async function startProduction() {
    setBusy(true);
    try {
      await updateArticleStatus(article.id, "in_production");
      await onChanged?.();
    } catch (e) {
      console.error(e?.response?.data || e);
      alert(e?.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ");
    } finally {
      setBusy(false);
    }
  }

  async function backToAccepted() {
    setBusy(true);
    try {
      await updateArticleStatus(article.id, "accepted");
      await onChanged?.();
    } catch (e) {
      console.error(e?.response?.data || e);
      alert(e?.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –≤ '–ü—Ä–∏–Ω—è—Ç–∞'");
    } finally {
      setBusy(false);
    }
  }

  async function publish() {
    if (!hasPdf) { alert("–ù–µ–ª—å–∑—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–µ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ production_pdf."); return; }
    setPublishing(true);
    try {
      await updateArticleStatus(article.id, "published");
      await onChanged?.();
    } catch (e) {
      console.error(e?.response?.data || e);
      alert(e?.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é");
    } finally {
      setPublishing(false);
    }
  }

  async function onUpload(e) {
    const file = e.target.files?.[0];
    if (!file) return;
    if (file.type !== "application/pdf") { alert("–ó–∞–≥—Ä—É–∑–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, PDF-—Ñ–∞–π–ª."); return; }
    setBusy(true);
    try {
      await uploadProductionPdf(article.id, file);
      await refreshFiles();
    } catch (err) {
      console.error(err?.response?.data || err);
      alert(err?.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF");
    } finally {
      setBusy(false);
      e.target.value = "";
    }
  }

  async function removeFile(fileId) {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?")) return;
    setBusy(true);
    try {
      await deleteArticleFile(article.id, fileId);
      await refreshFiles();
    } catch (err) {
      console.error(err?.response?.data || err);
      alert(err?.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª");
    } finally {
      setBusy(false);
    }
  }

  return (
    <div className="space-y-3">
      <div className="flex flex-wrap items-center gap-2">
        {isAccepted && (
          <Button onClick={startProduction} disabled={busy}>–ù–∞—á–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ</Button>
        )}

        {isInProd && (
          <>
            <label className="inline-flex items-center gap-2">
              <input type="file" accept="application/pdf" className="hidden" onChange={onUpload} disabled={busy}/>
              <span className="inline-flex items-center gap-2 border rounded-md px-3 py-2 cursor-pointer">
                <UploadIcon className="w-4 h-4" /> –ó–∞–≥—Ä—É–∑–∏—Ç—å production PDF
              </span>
            </label>

            <Button onClick={publish} disabled={publishing || busy || !hasPdf}
              className="bg-green-600 hover:bg-green-700"
              title={hasPdf ? "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é" : "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ production_pdf"}>
              {publishing ? (<><Loader2 className="w-4 h-4 mr-2 animate-spin" /> –ü—É–±–ª–∏–∫—É–µ–º‚Ä¶</>) :
                (<><CheckCircle2 className="w-4 h-4 mr-2" /> –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å</>)}
            </Button>

            <Button variant="outline" onClick={backToAccepted} disabled={busy}>
              –°–Ω—è—Ç—å –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω–∞ ‚Üí –ü—Ä–∏–Ω—è—Ç–∞
            </Button>
          </>
        )}

        {isPublished && <Badge className="bg-green-600">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞</Badge>}
      </div>

      <div className="rounded-md border p-3">
        <div className="text-sm font-medium mb-2">–§–∞–π–ª—ã —Å—Ç–∞—Ç—å–∏</div>
        {loadingFiles ? (
          <div className="text-gray-500 flex items-center gap-2 text-sm">
            <Loader2 className="w-4 h-4 animate-spin" /> –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤‚Ä¶
          </div>
        ) : prodPdfs.length ? (
          <ul className="space-y-2">
            {prodPdfs.map((f) => (
              <li key={f.id} className="flex items-center justify-between">
                <a href={f.file} target="_blank" rel="noreferrer" className="underline truncate" title={f.file}>
                  production_pdf ‚Äî {fmt(f.uploaded_at)}
                </a>
                {article.status !== "published" && (
                  <Button variant="ghost" size="sm" onClick={() => removeFile(f.id)} title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª" disabled={busy}>
                    <Trash2 className="w-4 h-4" />
                  </Button>
                )}
              </li>
            ))}
          </ul>
        ) : (
          <div className="text-sm text-gray-500">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö production PDF.</div>
        )}
      </div>
    </div>
  );
}

/* ---------- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç—É—Ä—ã ---------- */
export default function ProofreaderDashboard() {
  const [loading, setLoading] = useState(true);
  const [membershipsLoading, setMembershipsLoading] = useState(true);

  // –∂—É—Ä–Ω–∞–ª—ã, –≥–¥–µ –µ—Å—Ç—å —Ä–æ–ª—å proofreader
  const [journals, setJournals] = useState([]);
  const [journalId, setJournalId] = useState(null);

  // –æ—á–µ—Ä–µ–¥–∏ —Å—Ç–∞—Ç–µ–π (–∫–∞–∫ –±—ã–ª–æ)
  const [accepted, setAccepted]   = useState([]);
  const [inProd, setInProd]       = useState([]);
  const [published, setPublished] = useState([]);

  // üîπ NEW: –≤—ã–ø—É—Å–∫–∏
  const [issues, setIssues] = useState([]);
  const [pdfMap, setPdfMap] = useState({}); // {issueId: url|null}
  const [issuesLoading, setIssuesLoading] = useState(true);
  const [busyIssueId, setBusyIssueId] = useState(null);

  async function loadArticlesForJournal(jid) {
    if (!jid) return;
    setLoading(true);
    try {
      const [a, p, pub] = await Promise.all([
        listArticles({ status: "accepted",       journal: jid, ordering: "-created_at", page_size: 50 }),
        listArticles({ status: "in_production",  journal: jid, ordering: "-created_at", page_size: 50 }),
        listArticles({ status: "published",      journal: jid, ordering: "-created_at", page_size: 50 }),
      ]);
      const norm = (x) => (Array.isArray(x?.results) ? x.results : Array.isArray(x) ? x : []);
      setAccepted(norm(a));
      setInProd(norm(p));
      setPublished(norm(pub));
    } finally {
      setLoading(false);
    }
  }

  // üîπ NEW: –∑–∞–≥—Ä—É–∑–∫–∞ –≤—ã–ø—É—Å–∫–æ–≤
  async function loadIssues(jid) {
    setIssuesLoading(true);
    try {
      const list = await listIssues(jid);
      setIssues(list);
      const entries = await Promise.all(list.map(async (i) => [i.id, await getIssuePdfUrl(i.id)]));
      setPdfMap(Object.fromEntries(entries));
    } finally {
      setIssuesLoading(false);
    }
  }



  useEffect(() => {
    let mounted = true;
    (async () => {
      setMembershipsLoading(true);
      try {
        const url = withParams(API.JOURNAL_MEMBERSHIPS, { mine: true, page_size: 300 });
        const { data } = await http.get(url);
        const rows = Array.isArray(data?.results) ? data.results : Array.isArray(data) ? data : [];
        const proofRows = rows.filter((m) => String(m.role) === "proofreader" && m.journal);

        const uniqueJids = [...new Set(proofRows.map((m) => Number(m.journal)).filter(Boolean))];

        const fetched = [];
        for (const jid of uniqueJids) {
          try {
            const { data: j } = await http.get(API.JOURNAL_ID(jid));
            fetched.push({ id: Number(j.id), title: j.title || `–ñ—É—Ä–Ω–∞–ª #${jid}`, organization: j.organization });
          } catch {
            fetched.push({ id: Number(jid), title: `–ñ—É—Ä–Ω–∞–ª #${jid}`, organization: null });
          }
        }

        if (!mounted) return;
        setJournals(fetched);
        setJournalId((prev) => prev ?? (fetched.length === 1 ? fetched[0].id : null));
      } finally {
        if (mounted) setMembershipsLoading(false);
      }
    })();
    return () => { mounted = false; };
  }, []);

  useEffect(() => {
    if (!journalId) return;
    loadArticlesForJournal(journalId);
    loadIssues(journalId); // üîπ NEW
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [journalId]);

  const currentJournal = useMemo(
    () => journals.find((j) => Number(j.id) === Number(journalId)),
    [journals, journalId]
  );

  // üîπ NEW: –¥–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–ø—É—Å–∫–æ–º (inline)
  async function createIssue() {
    const label = window.prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–π 2025):");
    if (!label) return;
    try {
 const created = await createIssueArticle(journalId, label);
    // –°—Ä–∞–∑—É –ø—Ä–æ—Ç–∞–ª–∫–∏–≤–∞–µ–º –≤—ã–ø—É—Å–∫ –≤ in_production, —á—Ç–æ–±—ã –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∞–ø–ª–æ–∞–¥ PDF
    await forceIssueToProduction(created.id); // –º—è–≥–∫–æ –¥–æ–≤–æ–¥–∏–º –¥–æ in_production
    await loadIssues(journalId);
    alert("–í—ã–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω –∏ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ.");
    } catch (e) {
      console.error(e?.response?.data || e);
alert(e?.message || e?.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã–ø—É—Å–∫");
    }
  }

  async function uploadIssue(id, file) {
    if (!file) return;
    if (file.type !== "application/pdf") { alert("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF."); return; }
    setBusyIssueId(id);
    try {
      await uploadIssuePdf(id, file);
      await loadIssues(journalId);
    } catch (e) {
      console.error(e?.response?.data || e);
      alert(e?.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF");
    } finally {
      setBusyIssueId(null);
    }
  }

 async function publishIssueNow(id) {
  if (!pdfMap[id]) { alert("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF."); return; }
  setBusyIssueId(id);
  try {

    const cur = await getIssue(id);
   if (cur.status !== "in_production") await forceIssueToProduction(id);
    await advanceIssueTo(id, "published");
     await loadIssues(journalId);
     alert("–í—ã–ø—É—Å–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω");
  } catch (e) {
    console.error(e?.response?.data || e);
alert(e?.message || e?.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–ø—É—Å–∫");
  } finally {
    setBusyIssueId(null);
  }
}

  async function backIssueToProduction(id) {
    setBusyIssueId(id);
    try {
      await forceIssueToProduction(id);
      await loadIssues(journalId);
    } catch (e) {
      console.error(e?.response?.data || e);
 alert(e?.message || e?.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å");
    } finally {
      setBusyIssueId(null);
    }
  }

  // guards
  if (membershipsLoading) {
    return (
      <div className="p-6 text-gray-500 flex items-center gap-2">
        <Loader2 className="h-4 w-4 animate-spin" /> –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç—É—Ä—ã‚Ä¶
      </div>
    );
  }
  if (!journals.length) {
    return <div className="p-6">–ù–µ—Ç –ø—Ä–∞–≤ –∫–æ—Ä—Ä–µ–∫—Ç—É—Ä—ã ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</div>;
  }

  return (
    <div className="space-y-6 p-4 lg:p-6">
      <div className="flex items-center justify-between gap-3">
        <h1 className="text-2xl font-bold">–î–∞—à–±–æ—Ä–¥ –∫–æ—Ä—Ä–µ–∫—Ç—É—Ä—ã</h1>
        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-600">–ñ—É—Ä–Ω–∞–ª:</span>
          <Select value={journalId ? String(journalId) : undefined} onValueChange={(v) => setJournalId(Number(v))}>
            <SelectTrigger className="w-72">
              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∂—É—Ä–Ω–∞–ª" />
            </SelectTrigger>
            <SelectContent>
              {journals.map((j) => (
                <SelectItem key={j.id} value={String(j.id)}>{j.title}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      {currentJournal && (
        <div className="text-sm text-gray-600">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{currentJournal.organization ?? "‚Äî"}</b></div>
      )}

      {/* üîπ NEW: –í—ã–ø—É—Å–∫–∏ –∂—É—Ä–Ω–∞–ª–∞ */}
      <Card className="border-0 shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>–í—ã–ø—É—Å–∫–∏ –∂—É—Ä–Ω–∞–ª–∞</span>
            <Button onClick={createIssue}>
              <Plus className="w-4 h-4 mr-2" /> –°–æ–∑–¥–∞—Ç—å –≤—ã–ø—É—Å–∫
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent className="p-4">
          {issuesLoading ? (
            <div className="text-gray-500 flex items-center gap-2 text-sm">
              <Loader2 className="w-4 h-4 animate-spin" /> –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–ø—É—Å–∫–æ–≤‚Ä¶
            </div>
          ) : issues.length ? (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              {issues.map((i) => {
                const pdf = pdfMap[i.id];
                const busy = busyIssueId === i.id;
                return (
                  <Card key={i.id} className="shadow-sm border border-slate-200 rounded-2xl">
                    <CardContent className="p-4 space-y-3">
                      <div className="flex items-start justify-between gap-3">
                        <div className="min-w-0">
                          <div className="font-medium truncate">{prettyIssueTitle(i.title)}</div>
                          <div className="text-xs text-gray-500">
                            –í—ã–ø—É—Å–∫ #{i.id} ‚Ä¢ –°—Ç–∞—Ç—É—Å: <b>{STATUS_LABEL[i.status] || i.status}</b> ‚Ä¢ –°–æ–∑–¥–∞–Ω {fmt(i.created_at)}
                          </div>
                        </div>
                        <Badge>{STATUS_LABEL[i.status] || i.status}</Badge>
                      </div>

                      <div className="flex flex-wrap items-center gap-2">
                        {pdf ? (
                          <a href={pdf} target="_blank" rel="noreferrer">
                            <Button variant="outline" className="bg-transparent">–°–∫–∞—á–∞—Ç—å PDF</Button>
                          </a>
                        ) : (
                          <Button variant="outline" className="bg-transparent" disabled>PDF –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</Button>
                        )}

                        <label className="inline-flex items-center gap-2">
                          <input
                            type="file"
                            accept="application/pdf"
                            className="hidden"
                            disabled={busy}
                            onChange={(e) => {
                              const f = e.target.files?.[0];
                              uploadIssue(i.id, f);
                              e.target.value = "";
                            }}
                          />
                          <span className="inline-flex items-center gap-2 border rounded-md px-3 py-2 cursor-pointer">
                            <UploadIcon className="w-4 h-4" /> –ó–∞–≥—Ä—É–∑–∏—Ç—å PDF
                          </span>
                        </label>

                        {i.status === "published" ? (
                          <Badge className="bg-green-600">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</Badge>
                        ) : (
                          <>
                            <Button onClick={() => publishIssueNow(i.id)}
                              disabled={busy || !pdf}
                              className="bg-green-600 hover:bg-green-700">
                              {busy ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <CheckCircle2 className="w-4 h-4 mr-2" />}
                              –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                            </Button>
                           {i.status !== "in_production" && (
   <Button variant="outline" onClick={() => backIssueToProduction(i.id)} disabled={busy}>
     –í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
   </Button>
 )}
                          </>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          ) : (
            <div className="text-gray-500">–í—ã–ø—É—Å–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π.</div>
          )}
        </CardContent>
      </Card>

      {/* ===== –ù–∏–∂–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—á–µ—Ä–µ–¥–∏ –ø–æ –æ–¥–∏–Ω–æ—á–Ω—ã–º —Å—Ç–∞—Ç—å—è–º ===== */}
      {loading ? (
        <div className="p-6 text-gray-500 flex items-center gap-2">
          <Loader2 className="h-4 w-4 animate-spin" /> –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π‚Ä¶
        </div>
      ) : (
        <>
          {/* Accepted */}
          <Card className="border-0 shadow-sm">
            <CardHeader><CardTitle>–ü—Ä–∏–Ω—è—Ç—ã (Accepted) <span className="text-gray-400">({accepted.length})</span></CardTitle></CardHeader>
            <CardContent className="p-4">
              {accepted.length ? (
                <div className="space-y-4">
                  {accepted.map((a) => (
                    <Card key={a.id} className="shadow-sm border border-slate-200">
                      <CardContent className="p-4 space-y-3">
                        <div className="flex items-start justify-between gap-3">
                          <div className="min-w-0">
                            <div className="font-medium truncate">{a.title}</div>
                            <div className="text-xs text-gray-500">
                              –ñ—É—Ä–Ω–∞–ª #{a.journal} ‚Ä¢ –ê–≤—Ç–æ—Ä {a.author_email} ‚Ä¢ {fmt(a.created_at)}
                            </div>
                          </div>
                          <div className="flex items-center gap-2 shrink-0">
                            <Badge>{STATUS_LABEL[a.status] || a.status}</Badge>
                            <Link to={`/articles/${a.id}`}>
                              <Button variant="outline" className="bg-transparent">–û—Ç–∫—Ä—ã—Ç—å</Button>
                            </Link>
                          </div>
                        </div>
                        <ProductionPdfBlock article={a} onChanged={() => loadArticlesForJournal(journalId)} />
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (<div className="text-gray-500">–ù–µ—Ç —Å—Ç–∞—Ç–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äú–ü—Ä–∏–Ω—è—Ç–∞‚Äù.</div>)}
            </CardContent>
          </Card>

          {/* In production */}
          <Card className="border-0 shadow-sm">
            <CardHeader><CardTitle>–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ (In production) <span className="text-gray-400">({inProd.length})</span></CardTitle></CardHeader>
            <CardContent className="p-4">
              {inProd.length ? (
                <div className="space-y-4">
                  {inProd.map((a) => (
                    <Card key={a.id} className="shadow-sm border border-slate-200">
                      <CardContent className="p-4 space-y-3">
                        <div className="flex items-start justify-between gap-3">
                          <div className="min-w-0">
                            <div className="font-medium truncate">{a.title}</div>
                            <div className="text-xs text-gray-500">
                              –ñ—É—Ä–Ω–∞–ª #{a.journal} ‚Ä¢ –ê–≤—Ç–æ—Ä {a.author_email} ‚Ä¢ {fmt(a.created_at)}
                            </div>
                          </div>
                          <div className="flex items-center gap-2 shrink-0">
                            <Badge>{STATUS_LABEL[a.status] || a.status}</Badge>
                            <Link to={`/articles/${a.id}`}>
                              <Button variant="outline" className="bg-transparent">–û—Ç–∫—Ä—ã—Ç—å</Button>
                            </Link>
                          </div>
                        </div>
                        <ProductionPdfBlock article={a} onChanged={() => loadArticlesForJournal(journalId)} />
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (<div className="text-gray-500">–°–µ–π—á–∞—Å –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ.</div>)}
            </CardContent>
          </Card>

          {/* Published (read-only) */}
          <Card className="border-0 shadow-sm">
            <CardHeader><CardTitle>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã (Published) <span className="text-gray-400">({published.length})</span></CardTitle></CardHeader>
            <CardContent className="p-4">
              {published.length ? (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {published.map((a) => (
                    <Card key={a.id} className="shadow-sm border border-slate-200">
                      <CardContent className="p-4">
                        <div className="flex items-start justify-between gap-3">
                          <div className="min-w-0">
                            <div className="font-medium truncate">{a.title}</div>
                            <div className="text-xs text-gray-500">
                              –ñ—É—Ä–Ω–∞–ª #{a.journal} ‚Ä¢ –ê–≤—Ç–æ—Ä {a.author_email} ‚Ä¢ {fmt(a.created_at)}
                            </div>
                          </div>
                          <Badge className="bg-green-600">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞</Badge>
                        </div>
                        <div className="mt-3">
                          <Link to={`/articles/${a.id}`}>
                            <Button variant="outline" className="bg-transparent">–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</Button>
                          </Link>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (<div className="text-gray-500">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.</div>)}
            </CardContent>
          </Card>
        </>
      )}
    </div>
  );
}
